---
  ### ---------------------------------------------------------------------------
  ### APSTRA API AUTOMATION
  ### ---------------------------------------------------------------------------
  - hosts: localhost
    gather_facts: False
    connection: local
    roles:
      - { role: apstra_auth }

    tasks:
    - name: Initialize Variables
      set_fact: 
        leaf_ids: ""

    - name: "Get Blueprint ID"
      ansible.builtin.uri:
        url: "{{ apstra.baseurl }}/blueprints"
        method: GET
        status_code: 200
        headers:
          content-type: "application/json"
          AUTHTOKEN: "{{ login.json.token }}"
        validate_certs: false
        force_basic_auth: yes
      register: bp_ids


    - name: Retrieve Blueprint ID
      ansible.builtin.set_fact:
        bp_id: "{{ bp_ids.json | cleanup_bp_id(bp_name) }}"


    - name: "Get Connectvity Template"
      uri:
        url: "{{ apstra.baseurl }}/blueprints/{{ bp_id }}/obj-policy-export"
        method: GET
        status_code: 200
        headers:
          content-type: "application/json"
          AUTHTOKEN: "{{ login.json.token }}"
        validate_certs: false
        force_basic_auth: yes
          #body: "{{ lookup('ansible.builtin.template','templates/connectivity-template.j2') }}"
        body_format: json
      ignore_errors: yes
      register: cts

    - name:
      debug:
        var: cts

    - name: Retrieve Blueprint ID
      ansible.builtin.set_fact:
        desired_id: "{{ cts.json.policies | selectattr('tags', 'search', ct_tag) | map(attribute='id') | first }}"

    - name: show blueprint id
      ansible.builtin.debug:
        msg: "{{ desired_id }}"

    - name: "Get Connectvity Template"
      uri:
        url: "{{ apstra.baseurl }}/blueprints/{{ bp_id }}/obj-policy-export/{{ desired_id }}"
        method: GET
        status_code: 200
        headers:
          content-type: "application/json"
          AUTHTOKEN: "{{ login.json.token }}"
        validate_certs: false
        force_basic_auth: yes
          #body: "{{ lookup('ansible.builtin.template','templates/connectivity-template.j2') }}"
        body_format: json
      ignore_errors: yes
      register: ct_j2

    - name: Retrieve Blueprint IDs22
      ansible.builtin.set_fact:
        ctt_j2: "{{ ct_j2.json }}"

          #    - name:
          #ansible.builtin.debug:
          #msg: "{{ ctt_j2 }}"

    - name: "Get Connectvity Template"
      uri:
        url: "{{ apstra.baseurl }}/blueprints/{{ bp_id }}/virtual-networks"
        method: GET
        status_code: 200
        headers:
          content-type: "application/json"
          AUTHTOKEN: "{{ login.json.token }}"
        validate_certs: false
        force_basic_auth: yes
        body_format: json
      ignore_errors: yes
      register: vns

    - name:
      set_fact:
        vn_name: "{{ sz.vns | json_query('[].name') }}"

    - name:
      debug:
        var: vn_name

    - name:
      set_fact:
        vn_id: "{{ sz.vns | json_query('[].vn_id') }}"

    - name:
      debug:
        var: vn_id

    - name: Retrieve Blueprint IDs
      ansible.builtin.set_fact:
        vn_ids: "{{ vns.json.virtual_networks | dict2items | map(attribute='key') | list }}"

    - name: Retrieve Blueprint ID by name
      ansible.builtin.set_fact:
        vn_id: "{{ item.value.id }}"
      loop: "{{ vns.json.virtual_networks | dict2items }}"
      when: item.value.label == vn_name
      register: vn_id_results

        #- debug:
        #msg: "Sanal aÄŸ ID: {{ vn_id }}"
        #vars:
        #vn_id: "{{ vn_id_results.results | map(attribute='item') | map(attribute='vn_id') | select('defined') | list | first }}"

    - name:
      ansible.builtin.debug:
        msg: "{{ vn_id }}"

    - name: Generate random UUID-like number
      set_fact:
        random_uuid: "{{ 9999999999999999999999 | random | ansible.builtin.to_uuid }}"

    - name: Generate random UUID-like number
      set_fact:
        random_uuid2: "{{ 9999999999999999999999 | random | ansible.builtin.to_uuid }}"

    - name: write hostname using jinja2
      ansible.builtin.template:
        src: templates/add-vn-to-connectivity-template.j2
        dest: /tmp/hostname

    - name: Read and print Jinja2 template
      debug:
        msg: "{{ lookup('template', 'templates/add-vn-to-connectivity-template.j2') }}"
      register: json_template

    - name: Print updated ct_j2 for verification
      debug:
        var: json_template

          #- name: Print updated ct_j2 for verification
          #debug:
          #var: ctt_j2

    - name: Filter policies except ABC-TEST-CT-1-1-1-1-1
      set_fact:
        filtered_policies: "{{ ctt_j2.policies | json_query('[?tag != `' + ct_tag + '`]') }}"       

    - name: Print updated ct_j2 for verification
      debug:
        var: filtered_policies

    - name: Filter policies except ABC-TEST-CT-1
      set_fact:
        filtered_policies_ct_name: "{{ ctt_j2.policies | json_query('[?tag == `' + ct_tag + '`]') }}"

    - name: Print updated ct_j2 for verification
      debug:
        var: filtered_policies_ct_name

    - name: Clone filtered_policies_ct_name structure
      set_fact:
        updated_filtered_policies_ct_name: "{{ filtered_policies | map('combine', {'attributes': {'subpolicies': (filtered_policies | map(attribute='attributes.subpolicies') | list | first) + [random_uuid2]}}) | list }}"

          #- name: Show updated filtered_policies_ct_name
          #debug:
          #var: updated_filtered_policies_ct_name

    - name: Merge msg into ctt_j2.policies
      set_fact:
        ctt_j2:
          policies: "{{ updated_filtered_policies_ct_name  + filtered_policies + json_template.msg }}"

    - name: Print updated ct_j2 for verification
      debug:
        var: ctt_j2

    - name: "Create connectivity template"
      uri:
        url: "{{ apstra.baseurl }}/blueprints/{{ bp_id }}/obj-policy-import"
        method: PUT
        status_code: 204
        headers:
          content-type: "application/json"
          AUTHTOKEN: "{{ login.json.token }}"
        validate_certs: false
        force_basic_auth: yes
        body: "{{ ctt_j2 }}"
        body_format: json
      ignore_errors: yes
